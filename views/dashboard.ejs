<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Health Tracker</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <nav class="navbar">
        <div class="nav-brand">
            <h1>Health Tracker</h1>
        </div>
        <div class="nav-links">
            <a href="/dashboard" class="active">Dashboard</a>
            <a href="/health">Glucose & Ketones</a>
            <a href="/food">Food</a>
            <a href="/food/meals">Meals</a>
            <a href="/body">Body Metrics</a>
            <a href="/settings">Settings</a>
            <a href="/logout">Logout</a>
        </div>
    </nav>
    
    <main class="container">
        <h2>Welcome back, <%= username %>!</h2>
        
        <div class="dashboard-grid">
            <div class="dashboard-card full-width-chart">
                <h3>Glucose & Ketones Chart</h3>
                <div class="chart-controls">
                    <div class="time-period-buttons">
                        <button class="period-btn active" data-period="daily">Daily</button>
                        <button class="period-btn" data-period="weekly">Weekly</button>
                        <button class="period-btn" data-period="monthly">Monthly</button>
                    </div>
                </div>
                <canvas id="glucoseChart"></canvas>
                <div class="chart-slider-container">
                    <input type="range" id="chartSlider" class="chart-slider" min="0" max="0" value="0">
                    <div class="slider-labels">
                        <span id="sliderStart">-</span>
                        <span id="sliderEnd">-</span>
                    </div>
                </div>
            </div>
            
            <div class="dashboard-card">
                <h3>Body Metrics Chart</h3>
                <canvas id="bodyChart"></canvas>
            </div>
            
            <div class="dashboard-card">
                <h3>Recent Readings</h3>
                <div class="recent-readings">
                    <% if (readings.length > 0) { %>
                        <% readings.slice(0, 5).forEach(reading => { %>
                            <div class="reading-item">
                                <span>Glucose: <%= reading.glucose_level %> mg/dL</span>
                                <span>Ketones: <%= reading.ketone_level %> mmol/L</span>
                                <span>GKI: <%= reading.gki.toFixed(2) %></span>
                                <span><%= new Date(reading.timestamp).toLocaleDateString() %></span>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p>No readings yet. <a href="/health">Add your first reading</a></p>
                    <% } %>
                </div>
            </div>
            
            <div class="dashboard-card">
                <h3>Recent Meals</h3>
                <div class="recent-meals">
                    <% if (meals.length > 0) { %>
                        <% meals.slice(0, 5).forEach(meal => { %>
                            <div class="meal-item">
                                <strong><%= meal.meal_type %></strong>
                                <span><%= meal.foods || 'No foods' %></span>
                                <span><%= new Date(meal.timestamp).toLocaleDateString() %></span>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p>No meals logged yet. <a href="/food/meals">Log your first meal</a></p>
                    <% } %>
                </div>
            </div>
        </div>
    </main>
    
    <script>
        let glucoseChart;
        let allData = [];
        let currentPeriod = 'daily';
        let currentStartIndex = 0;
        const maxDataPoints = 12;
        
        // Initialize chart
        function initChart(data) {
            const ctx = document.getElementById('glucoseChart').getContext('2d');
            
            if (glucoseChart) {
                glucoseChart.destroy();
            }
            
            // Limit data to maxDataPoints starting from currentStartIndex
            const displayData = data.slice(currentStartIndex, currentStartIndex + maxDataPoints);
            
            // Prepare datasets based on period
            let datasets = [];
            let globalMin = 0;
            let globalMax = 200;
            
            if (currentPeriod === 'daily') {
                // Simple line charts for daily view
                datasets = [{
                    label: 'Glucose (mg/dL)',
                    data: displayData.map(d => d.glucose_level),
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    yAxisID: 'y'
                }, {
                    label: 'Ketones (mmol/L)',
                    data: displayData.map(d => d.ketone_level),
                    borderColor: 'rgb(54, 162, 235)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    yAxisID: 'y1'
                }, {
                    label: 'GKI',
                    data: displayData.map(d => d.gki),
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    yAxisID: 'y2'
                }];
            } else {
                // Line charts with error bars for weekly/monthly views
                console.log('Weekly/Monthly displayData:', displayData);
                
                // Prepare mean data with error bars
                const glucoseMeans = [];
                const ketoneMeans = [];
                const gkiMeans = [];
                
                displayData.forEach((d, index) => {
                    if (d.glucose_stats && d.glucose_stats.mean) {
                        glucoseMeans.push({
                            x: index,
                            y: d.glucose_stats.mean,
                            yMin: d.glucose_stats.mean - d.glucose_stats.stdDev,
                            yMax: d.glucose_stats.mean + d.glucose_stats.stdDev
                        });
                    } else {
                        glucoseMeans.push(null);
                    }
                    
                    if (d.ketone_stats && d.ketone_stats.mean) {
                        ketoneMeans.push({
                            x: index,
                            y: d.ketone_stats.mean,
                            yMin: d.ketone_stats.mean - d.ketone_stats.stdDev,
                            yMax: d.ketone_stats.mean + d.ketone_stats.stdDev
                        });
                    } else {
                        ketoneMeans.push(null);
                    }
                    
                    if (d.gki_stats && d.gki_stats.mean) {
                        gkiMeans.push({
                            x: index,
                            y: d.gki_stats.mean,
                            yMin: d.gki_stats.mean - d.gki_stats.stdDev,
                            yMax: d.gki_stats.mean + d.gki_stats.stdDev
                        });
                    } else {
                        gkiMeans.push(null);
                    }
                });
                
                // Create datasets with error bars
                datasets = [{
                    label: 'Glucose (mg/dL)',
                    data: glucoseMeans.map(d => d ? d.y : null),
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderWidth: 2,
                    pointRadius: 4,
                    pointHoverRadius: 6,
                    yAxisID: 'y',
                    spanGaps: true,
                    tension: 0.4
                }, {
                    label: 'Ketones (mmol/L)',
                    data: ketoneMeans.map(d => d ? d.y : null),
                    borderColor: 'rgb(54, 162, 235)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderWidth: 2,
                    pointRadius: 4,
                    pointHoverRadius: 6,
                    yAxisID: 'y1',
                    spanGaps: true,
                    tension: 0.4
                }, {
                    label: 'GKI',
                    data: gkiMeans.map(d => d ? d.y : null),
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderWidth: 2,
                    pointRadius: 4,
                    pointHoverRadius: 6,
                    yAxisID: 'y2',
                    spanGaps: true,
                    tension: 0.4
                }];
                
                // Add error bars as area fills
                if (glucoseMeans.some(d => d !== null)) {
                    // Upper bound
                    datasets.push({
                        label: '',
                        data: glucoseMeans.map(d => d ? d.yMax : null),
                        borderColor: 'transparent',
                        backgroundColor: 'transparent',
                        fill: false,
                        pointRadius: 0,
                        yAxisID: 'y',
                        showLine: true,
                        tension: 0.4
                    });
                    // Lower bound with fill
                    datasets.push({
                        label: '',
                        data: glucoseMeans.map(d => d ? d.yMin : null),
                        borderColor: 'transparent',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        fill: '-1', // Fill to previous dataset
                        pointRadius: 0,
                        yAxisID: 'y',
                        showLine: true,
                        tension: 0.4
                    });
                }
                
                if (ketoneMeans.some(d => d !== null)) {
                    // Upper bound
                    datasets.push({
                        label: '',
                        data: ketoneMeans.map(d => d ? d.yMax : null),
                        borderColor: 'transparent',
                        backgroundColor: 'transparent',
                        fill: false,
                        pointRadius: 0,
                        yAxisID: 'y1',
                        showLine: true,
                        tension: 0.4
                    });
                    // Lower bound with fill
                    datasets.push({
                        label: '',
                        data: ketoneMeans.map(d => d ? d.yMin : null),
                        borderColor: 'transparent',
                        backgroundColor: 'rgba(54, 162, 235, 0.1)',
                        fill: '-1', // Fill to previous dataset
                        pointRadius: 0,
                        yAxisID: 'y1',
                        showLine: true,
                        tension: 0.4
                    });
                }
                
                if (gkiMeans.some(d => d !== null)) {
                    // Upper bound
                    datasets.push({
                        label: '',
                        data: gkiMeans.map(d => d ? d.yMax : null),
                        borderColor: 'transparent',
                        backgroundColor: 'transparent',
                        fill: false,
                        pointRadius: 0,
                        yAxisID: 'y2',
                        showLine: true,
                        tension: 0.4
                    });
                    // Lower bound with fill
                    datasets.push({
                        label: '',
                        data: gkiMeans.map(d => d ? d.yMin : null),
                        borderColor: 'transparent',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        fill: '-1', // Fill to previous dataset
                        pointRadius: 0,
                        yAxisID: 'y2',
                        showLine: true,
                        tension: 0.4
                    });
                }
            }
            
            console.log('Creating chart with', datasets.length, 'datasets');
            console.log('First dataset:', datasets[0]);
            console.log('Labels:', displayData.map(d => formatDate(d.timestamp)));
            if (currentPeriod !== 'daily') {
                console.log('Dataset 0 data:', datasets[0].data);
                console.log('Dataset 1 data:', datasets[1].data);
                console.log('Dataset 2 data:', datasets[2].data);
            }
            
            glucoseChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: displayData.map(d => formatDate(d.timestamp)),
                        datasets: datasets
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        plugins: {
                            tooltip: {
                                filter: function(tooltipItem) {
                                    // Only show tooltips for datasets with labels
                                    return tooltipItem.dataset.label && tooltipItem.dataset.label !== '';
                                },
                                callbacks: {
                                    label: function(context) {
                                        const label = context.dataset.label || '';
                                        const value = context.parsed.y;
                                        
                                        // Skip error bar datasets
                                        if (!label || label === '') return null;
                                        
                                        if (value !== null && value !== undefined) {
                                            // Format based on the metric type
                                            if (label.includes('Glucose')) {
                                                return `${label}: ${value.toFixed(0)}`;
                                            } else if (label.includes('Ketones')) {
                                                return `${label}: ${value.toFixed(1)}`;
                                            } else if (label.includes('GKI')) {
                                                return `${label}: ${value.toFixed(2)}`;
                                            }
                                            return `${label}: ${value.toFixed(1)}`;
                                        }
                                        
                                        return label;
                                    }
                                }
                            },
                            legend: {
                                labels: {
                                    filter: function(legendItem, data) {
                                        return legendItem.text && legendItem.text !== '';
                                    }
                                },
                                onClick: function(e, legendItem, legend) {
                                    const index = legendItem.datasetIndex;
                                    const chart = legend.chart;
                                    const meta = chart.getDatasetMeta(index);
                                    
                                    // Toggle visibility
                                    meta.hidden = meta.hidden === null ? !chart.data.datasets[index].hidden : null;
                                    chart.update();
                                }
                            }
                        },
                        scales: (function() {
                            if (currentPeriod === 'daily') {
                                return {
                                // Daily view - traditional time series
                                x: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            },
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'Glucose (mg/dL)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Ketones (mmol/L)'
                                },
                                grid: {
                                    drawOnChartArea: false,
                                },
                            },
                            y2: {
                                type: 'linear',
                                display: false,
                                position: 'right'
                            }
                        };
                    } else {
                        return {
                            // Weekly/Monthly view - line charts with multiple axes
                            x: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            },
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'Glucose (mg/dL)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Ketones (mmol/L)'
                                },
                                grid: {
                                    drawOnChartArea: false,
                                },
                            },
                            y2: {
                                type: 'linear',
                                display: false,
                                position: 'right'
                            }
                        };
                    }
                })()
                }
            });
        }
        
        // Format date based on period
        function formatDate(timestamp) {
            // Convert to string if it's a Date object
            if (timestamp instanceof Date) {
                timestamp = timestamp.toISOString();
            }
            
            // Ensure timestamp is a string
            if (typeof timestamp !== 'string') {
                timestamp = String(timestamp);
            }
            
            // For YYYY-MM-DD format, parse it explicitly to avoid timezone issues
            if (timestamp.includes('-') && timestamp.length >= 10) {
                const [year, month, day] = timestamp.split('-').map(num => parseInt(num));
                const date = new Date(year, month - 1, day); // month is 0-indexed
                
                if (currentPeriod === 'monthly') {
                    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
                } else if (currentPeriod === 'weekly') {
                    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                }
                return date.toLocaleDateString();
            }
            
            // Fallback for other timestamp formats
            const date = new Date(timestamp);
            if (currentPeriod === 'monthly') {
                return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
            } else if (currentPeriod === 'weekly') {
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            }
            return date.toLocaleDateString();
        }
        
        // Update slider
        function updateSlider() {
            const slider = document.getElementById('chartSlider');
            const maxSliderValue = Math.max(0, allData.length - maxDataPoints);
            slider.max = maxSliderValue;
            slider.value = currentStartIndex;
            
            // Update labels
            if (allData.length > 0) {
                const startDate = new Date(allData[currentStartIndex].timestamp);
                const endIndex = Math.min(currentStartIndex + maxDataPoints - 1, allData.length - 1);
                const endDate = new Date(allData[endIndex].timestamp);
                
                document.getElementById('sliderStart').textContent = formatDate(startDate);
                document.getElementById('sliderEnd').textContent = formatDate(endDate);
            }
        }
        
        // Load data for selected period
        function loadData(period) {
            fetch(`/dashboard/api/chart-data?type=glucose&period=${period}`)
                .then(response => response.json())
                .then(data => {
                    console.log(`Loaded ${period} data:`, data);
                    allData = data;
                    currentStartIndex = Math.max(0, data.length - maxDataPoints); // Start from most recent
                    updateSlider();
                    initChart(allData);
                })
                .catch(err => console.error('Error loading data:', err));
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Period buttons
            document.querySelectorAll('.period-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelector('.period-btn.active').classList.remove('active');
                    this.classList.add('active');
                    currentPeriod = this.dataset.period;
                    loadData(currentPeriod);
                });
            });
            
            // Slider
            document.getElementById('chartSlider').addEventListener('input', function() {
                currentStartIndex = parseInt(this.value);
                initChart(allData);
                updateSlider();
            });
            
            // Initial load
            loadData('daily');
        });
        
        // Load body metrics chart
        fetch('/dashboard/api/chart-data?type=body')
            .then(response => response.json())
            .then(data => {
                const ctx = document.getElementById('bodyChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(d => new Date(d.timestamp).toLocaleDateString()),
                        datasets: [{
                            label: 'Weight (kg)',
                            data: data.map(d => d.weight),
                            borderColor: 'rgb(255, 159, 64)',
                            backgroundColor: 'rgba(255, 159, 64, 0.2)',
                            yAxisID: 'y'
                        }, {
                            label: 'BMI',
                            data: data.map(d => d.bmi),
                            borderColor: 'rgb(153, 102, 255)',
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            yAxisID: 'y1'
                        }, {
                            label: 'Fat %',
                            data: data.map(d => d.fat_percentage),
                            borderColor: 'rgb(255, 205, 86)',
                            backgroundColor: 'rgba(255, 205, 86, 0.2)',
                            yAxisID: 'y2'
                        }]
                    },
                    options: {
                        responsive: true,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        scales: {
                            x: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            },
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'Weight (kg)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'BMI'
                                },
                                grid: {
                                    drawOnChartArea: false,
                                },
                            },
                            y2: {
                                type: 'linear',
                                display: false,
                                position: 'right',
                            }
                        }
                    }
                });
            });
    </script>
</body>
</html>